import java.time.Duration

plugins {
    `java-library`
    alias(libs.plugins.blossom)

    `maven-publish`
    signing
    alias(libs.plugins.nexuspublish)
}

// Read env vars (used for publishing generally)
version = System.getenv("MINESTOM_VERSION") ?: "dev"
val channel = System.getenv("MINESTOM_CHANNEL") ?: "local" // local, snapshot, release
val javaVersion = System.getenv("JAVA_VERSION") ?: "21"

val shortDescription = "1.21 Lightweight Minecraft server"

allprojects {
    apply(plugin = "java")

    group = "net.minestom"
    version = rootProject.version
    description = shortDescription

    repositories {
        mavenLocal()
        mavenCentral()
    }

    configurations.all {
        // We only use Jetbrains Annotations
        exclude("org.checkerframework", "checker-qual")
    }

    java {
        withSourcesJar()
        withJavadocJar()

        toolchain.languageVersion = JavaLanguageVersion.of(javaVersion)
    }

    tasks.withType<Zip> {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.withType<Test> {
        useJUnitPlatform()

        // Viewable packets make tracking harder. Could be re-enabled later.
        jvmArgs("-Dminestom.viewable-packet=false")
        jvmArgs("-Dminestom.inside-test=true")
        minHeapSize = "512m"
        maxHeapSize = "1024m"
    }

    tasks.withType<JavaCompile> {
        options.encoding = "UTF-8"
    }
}

sourceSets {
    main {
        java {
            srcDir(file("src/main/java"))
            srcDir(file("src/autogenerated/java"))
        }
        blossom {
            javaSources {

                val gitCommit = System.getenv("GITHUB_SHA")
                val gitBranch = System.getenv("GITHUB_REF")
                val group = project.group as String?
                val artifact = project.name as String?
                property("COMMIT", gitCommit ?: "LOCAL")
                property("BRANCH", gitBranch ?: "LOCAL")
                property("GROUP", group ?: "UNKNOWN")
                property("ARTIFACT", artifact ?: "UNKNOWN")
            }
        }
    }
}

dependencies {
    // Core dependencies
    api(libs.slf4j)
    api(libs.jetbrainsAnnotations)
    api(libs.bundles.adventure)
    implementation(libs.minestomData)

    // Performance/data structures
    api(libs.fastutil)
    implementation(libs.bundles.flare)
    api(libs.gson)
    implementation(libs.jcTools)

    // Testing
    testImplementation(libs.bundles.junit)
    testImplementation(project(":testing"))
}

tasks {
    jar {
        manifest {
            attributes("Automatic-Module-Name" to "net.minestom.server")
        }
    }
    withType<Javadoc> {
        (options as? StandardJavadocDocletOptions)?.apply {
            encoding = "UTF-8"

            // Custom options
            addBooleanOption("html5", true)
            addStringOption("-release", javaVersion)
            // Links to external javadocs
            links("https://docs.oracle.com/en/java/javase/${javaVersion}/docs/api/")
            links("https://javadoc.io/doc/net.kyori/adventure-api/${libs.versions.adventure.get()}/")
        }
    }

    nexusPublishing {
        useStaging.set(true)
        this.packageGroup.set("net.minestom")

        transitionCheckOptions {
            maxRetries.set(360) // 1 hour
            delayBetween.set(Duration.ofSeconds(10))
        }

        repositories.sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))

            if (System.getenv("SONATYPE_USERNAME") != null) {
                username.set(System.getenv("SONATYPE_USERNAME"))
                password.set(System.getenv("SONATYPE_PASSWORD"))
            }
        }
    }

    publishing.publications.create<MavenPublication>("maven") {
        groupId = "net.minestom"
        // todo: decide on publishing scheme
        artifactId = "minestom-skyblock"
        version = project.version.toString()

        from(project.components["java"])

        pom {
            name.set(this@create.artifactId)
            description.set(shortDescription)
            url.set("https://github.com/minestom/minestom")

            licenses {
                license {
                    name.set("Apache 2.0")
                    url.set("https://github.com/minestom/minestom/blob/main/LICENSE")
                }
            }

            developers {
                developer {
                    id.set("TheMode")
                }
                developer {
                    id.set("mworzala")
                    name.set("Matt Worzala")
                    email.set("matt@hollowcube.dev")
                }
            }

            issueManagement {
                system.set("GitHub")
                url.set("https://github.com/minestom/minestom/issues")
            }

            scm {
                connection.set("scm:git:git://github.com/minestom/minestom.git")
                developerConnection.set("scm:git:git@github.com:minestom/minestom.git")
                url.set("https://github.com/minestom/minestom")
                tag.set("HEAD")
            }

            ciManagement {
                system.set("Github Actions")
                url.set("https://github.com/minestom/minestom/actions")
            }
        }
    }

    signing {
        isRequired = System.getenv("CI") != null

        val privateKey = System.getenv("GPG_PRIVATE_KEY")
        val keyPassphrase = System.getenv()["GPG_PASSPHRASE"]
        useInMemoryPgpKeys(privateKey, keyPassphrase)

        sign(publishing.publications)
    }
}
publishing {
    publications {
        create<MavenPublication>("mavenJava") { // Use create<Type>("name") for publication definition
            from(components.getByName("java")) // Use getByName for components
            // You can customize artifactId if needed, but it should match your project's artifactId
            // artifactId = "minestom-snapshots" // This should be picked up automatically
        }
    }
    repositories {
        mavenLocal() // This publishes to your local .m2 repository
    }
}

// Optional: To ensure it's built and installed locally with a single command
tasks.register("publishToMavenLocalAndBuild") {
    dependsOn("publishToMavenLocal") // Use dependsOn() with string for task names
    // Add any other tasks needed, like "build" if it's not a direct dependency
    // For example: dependsOn("build", "publishToMavenLocal")
}